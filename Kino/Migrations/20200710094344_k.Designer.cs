// <auto-generated />
using System;
using Kino.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kino.Migrations
{
    [DbContext(typeof(MojDbContext))]
    [Migration("20200710094344_k")]
    partial class k
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kino.Models.Adresa", b =>
                {
                    b.Property<int>("AdresaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("NazivUlice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresaID");

                    b.HasIndex("GradId");

                    b.ToTable("Adresa");

                    b.HasData(
                        new
                        {
                            AdresaID = 1,
                            GradId = 1,
                            NazivUlice = "Mostar"
                        });
                });

            modelBuilder.Entity("Kino.Models.Drzava", b =>
                {
                    b.Property<int>("DrzavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oznaka")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaID");

                    b.ToTable("Drzava");

                    b.HasData(
                        new
                        {
                            DrzavaID = 1,
                            Naziv = "Bosna i Hercegovina",
                            Oznaka = "BiH"
                        });
                });

            modelBuilder.Entity("Kino.Models.Dvorana", b =>
                {
                    b.Property<int>("DvoranaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<int>("KinoObjekatID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaDvoraneID")
                        .HasColumnType("int");

                    b.HasKey("DvoranaID");

                    b.HasIndex("KinoObjekatID");

                    b.HasIndex("VrstaDvoraneID");

                    b.ToTable("Dvorana");
                });

            modelBuilder.Entity("Kino.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aktuelan")
                        .HasColumnType("bit");

                    b.Property<string>("DobnoOgraničenje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaIzdavanja")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<double>("Zarada")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Kino.Models.FilmGlumac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("GlumacID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("GlumacID");

                    b.ToTable("FilmGlumac");
                });

            modelBuilder.Entity("Kino.Models.FilmOcjena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<float?>("Ocjena")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("KupacID");

                    b.ToTable("FilmOcjena");
                });

            modelBuilder.Entity("Kino.Models.FilmReziser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ReziserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("ReziserID");

                    b.ToTable("FilmReziser");
                });

            modelBuilder.Entity("Kino.Models.Glumac", b =>
                {
                    b.Property<int>("GlumacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlumacID");

                    b.HasIndex("GradID");

                    b.ToTable("Glumac");
                });

            modelBuilder.Entity("Kino.Models.Grad", b =>
                {
                    b.Property<int>("GradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostanskiBroj")
                        .HasColumnType("int");

                    b.HasKey("GradID");

                    b.HasIndex("DrzavaID");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            GradID = 1,
                            DrzavaID = 1,
                            Naziv = "Mostar",
                            PostanskiBroj = 88000
                        });
                });

            modelBuilder.Entity("Kino.Models.KinoObjekat", b =>
                {
                    b.Property<int>("KinoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdresaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KinoID");

                    b.HasIndex("AdresaId");

                    b.ToTable("KinoObjekat");
                });

            modelBuilder.Entity("Kino.Models.Komentar", b =>
                {
                    b.Property<int>("KomentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<int>("ObjavaId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KomentarId");

                    b.HasIndex("KupacId");

                    b.HasIndex("ObjavaId");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("Kino.Models.Korisnik", b =>
                {
                    b.Property<int>("KorisnikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AutorizacijskiToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrojTelefona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnikID");

                    b.HasIndex("GradID");

                    b.HasIndex("UlogaID");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            KorisnikID = 1,
                            AutorizacijskiToken = new Guid("59fd8b11-89cc-4eae-b4dd-de534e48b753"),
                            BrojTelefona = "061111111",
                            DatumRodjenja = new DateTime(1998, 8, 15, 11, 43, 42, 886, DateTimeKind.Local).AddTicks(8177),
                            Email = "demo.demo@hotmail.com",
                            GradID = 1,
                            Ime = "Demo",
                            PasswordHash = "Test1234",
                            Prezime = "Demo",
                            UlogaID = 1,
                            UserName = "demo"
                        },
                        new
                        {
                            KorisnikID = 5,
                            AutorizacijskiToken = new Guid("712ba639-3107-4b1a-83e8-4fa271542849"),
                            BrojTelefona = "061111111",
                            DatumRodjenja = new DateTime(1998, 8, 15, 11, 43, 42, 897, DateTimeKind.Local).AddTicks(1764),
                            Email = "demo1.demo1@hotmail.com",
                            GradID = 1,
                            Ime = "Demo1",
                            PasswordHash = "Test12345",
                            Prezime = "Demo1",
                            UlogaID = 2,
                            UserName = "demo1"
                        },
                        new
                        {
                            KorisnikID = 6,
                            AutorizacijskiToken = new Guid("1137a93a-8079-4f0b-928e-a1ad64ebc099"),
                            BrojTelefona = "061111111",
                            DatumRodjenja = new DateTime(1998, 8, 15, 11, 43, 42, 897, DateTimeKind.Local).AddTicks(2547),
                            Email = "demo.demic@hotmail.com",
                            GradID = 1,
                            Ime = "demo",
                            PasswordHash = "Test123456",
                            Prezime = "demic",
                            UlogaID = 3,
                            UserName = "demod"
                        });
                });

            modelBuilder.Entity("Kino.Models.Kupac", b =>
                {
                    b.Property<int>("KupacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumUclanjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("KupacID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Kupac");
                });

            modelBuilder.Entity("Kino.Models.ManyToManyClasses.FilmZanr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ZanrId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("ZanrId");

                    b.ToTable("FilmZanr");
                });

            modelBuilder.Entity("Kino.Models.NagradnaIgra", b =>
                {
                    b.Property<int>("NagradnaIgraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Kraj")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime2");

                    b.HasKey("NagradnaIgraID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("NagradnaIgra");
                });

            modelBuilder.Entity("Kino.Models.NagradnaIgraKupac", b =>
                {
                    b.Property<int>("NagradnaIgraKupacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<int>("NagradnaIgraId")
                        .HasColumnType("int");

                    b.HasKey("NagradnaIgraKupacId");

                    b.HasIndex("KupacId");

                    b.HasIndex("NagradnaIgraId");

                    b.ToTable("NagradnaIgraKupac");
                });

            modelBuilder.Entity("Kino.Models.Objava", b =>
                {
                    b.Property<int>("ObjavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObjavaID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Objava");
                });

            modelBuilder.Entity("Kino.Models.Projekcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<int>("DvoranaID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Kraj")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DvoranaID");

                    b.HasIndex("FilmID");

                    b.ToTable("Projekcija");
                });

            modelBuilder.Entity("Kino.Models.ProjekcijaSjedista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjekcijaID")
                        .HasColumnType("int");

                    b.Property<int?>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("SjedisteID")
                        .HasColumnType("int");

                    b.Property<bool>("Zauzeto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProjekcijaID");

                    b.HasIndex("RezervacijaID");

                    b.HasIndex("SjedisteID");

                    b.ToTable("projekcijaSjedista");
                });

            modelBuilder.Entity("Kino.Models.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<int>("ProjekcijaID")
                        .HasColumnType("int");

                    b.Property<double>("UkupnaCijena")
                        .HasColumnType("float");

                    b.Property<bool>("Zakljucena")
                        .HasColumnType("bit");

                    b.Property<int>("brojSjedista")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KupacID");

                    b.HasIndex("ProjekcijaID");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Kino.Models.Reziser", b =>
                {
                    b.Property<int>("ReziserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReziserID");

                    b.HasIndex("GradID");

                    b.ToTable("Reziser");
                });

            modelBuilder.Entity("Kino.Models.Sjediste", b =>
                {
                    b.Property<int>("SjedisteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DvoranaID")
                        .HasColumnType("int");

                    b.Property<int>("Kolona")
                        .HasColumnType("int");

                    b.Property<string>("Red")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SjedisteID");

                    b.ToTable("Sjedista");
                });

            modelBuilder.Entity("Kino.Models.Uloga", b =>
                {
                    b.Property<int>("UlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaID");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogaID = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            UlogaID = 2,
                            Naziv = "Uposlenik"
                        },
                        new
                        {
                            UlogaID = 3,
                            Naziv = "Kupac"
                        });
                });

            modelBuilder.Entity("Kino.Models.VrstaDvorane", b =>
                {
                    b.Property<int>("VrstaDvoraneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VrstaDvoraneID");

                    b.ToTable("VrstaDvorane");
                });

            modelBuilder.Entity("Kino.Models.Zanr", b =>
                {
                    b.Property<int>("ZanrID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Zarada")
                        .HasColumnType("float");

                    b.HasKey("ZanrID");

                    b.ToTable("Zanr");

                    b.HasData(
                        new
                        {
                            ZanrID = 1,
                            Naziv = "Komedija",
                            Opis = "Satiričan sadržaj",
                            Zarada = 0.0
                        },
                        new
                        {
                            ZanrID = 2,
                            Naziv = "Drama",
                            Opis = "Užurbana i tajanstvena radnja",
                            Zarada = 0.0
                        },
                        new
                        {
                            ZanrID = 3,
                            Naziv = "Romantični",
                            Opis = "Radnja temeljena na romantici",
                            Zarada = 0.0
                        },
                        new
                        {
                            ZanrID = 4,
                            Naziv = "Akcija",
                            Opis = "Radnja temeljena na akciji",
                            Zarada = 0.0
                        },
                        new
                        {
                            ZanrID = 5,
                            Naziv = "Horor",
                            Opis = "Strasni prizori",
                            Zarada = 0.0
                        },
                        new
                        {
                            ZanrID = 6,
                            Naziv = "Fantazija",
                            Opis = "Radnja temeljena na čarobnjacima i magijama",
                            Zarada = 0.0
                        });
                });

            modelBuilder.Entity("Kino.Models.Adresa", b =>
                {
                    b.HasOne("Kino.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Dvorana", b =>
                {
                    b.HasOne("Kino.Models.KinoObjekat", "KinoObjekat")
                        .WithMany()
                        .HasForeignKey("KinoObjekatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.VrstaDvorane", "VrstaDvorane")
                        .WithMany()
                        .HasForeignKey("VrstaDvoraneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.FilmGlumac", b =>
                {
                    b.HasOne("Kino.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Glumac", "Glumac")
                        .WithMany()
                        .HasForeignKey("GlumacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.FilmOcjena", b =>
                {
                    b.HasOne("Kino.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.FilmReziser", b =>
                {
                    b.HasOne("Kino.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Reziser", "Reziser")
                        .WithMany()
                        .HasForeignKey("ReziserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Glumac", b =>
                {
                    b.HasOne("Kino.Models.Grad", "Grad")
                        .WithMany("Glumci")
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Grad", b =>
                {
                    b.HasOne("Kino.Models.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.KinoObjekat", b =>
                {
                    b.HasOne("Kino.Models.Adresa", "Adresa")
                        .WithMany()
                        .HasForeignKey("AdresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Komentar", b =>
                {
                    b.HasOne("Kino.Models.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Objava", "Objava")
                        .WithMany()
                        .HasForeignKey("ObjavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Korisnik", b =>
                {
                    b.HasOne("Kino.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID");

                    b.HasOne("Kino.Models.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Kupac", b =>
                {
                    b.HasOne("Kino.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.ManyToManyClasses.FilmZanr", b =>
                {
                    b.HasOne("Kino.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.NagradnaIgra", b =>
                {
                    b.HasOne("Kino.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.NagradnaIgraKupac", b =>
                {
                    b.HasOne("Kino.Models.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.NagradnaIgra", "NagradnaIgra")
                        .WithMany()
                        .HasForeignKey("NagradnaIgraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Objava", b =>
                {
                    b.HasOne("Kino.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Projekcija", b =>
                {
                    b.HasOne("Kino.Models.Dvorana", "Dvorana")
                        .WithMany()
                        .HasForeignKey("DvoranaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.ProjekcijaSjedista", b =>
                {
                    b.HasOne("Kino.Models.Projekcija", "Projekcija")
                        .WithMany()
                        .HasForeignKey("ProjekcijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID");

                    b.HasOne("Kino.Models.Sjediste", "Sjediste")
                        .WithMany()
                        .HasForeignKey("SjedisteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Rezervacija", b =>
                {
                    b.HasOne("Kino.Models.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kino.Models.Projekcija", "Projekcija")
                        .WithMany()
                        .HasForeignKey("ProjekcijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kino.Models.Reziser", b =>
                {
                    b.HasOne("Kino.Models.Grad", "Grad")
                        .WithMany("Reziseri")
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
